<launch>
  <arg name="KINECT1" default="$(optenv KINECT1 false)" />
  <arg name="KINECT2" default="$(optenv KINECT2 false)" />
  <!-- send pr2 urdf to param server -->
  <group>
    <param name="robot_description" command="$(find xacro)/xacro '$(find mobile_manipulation_rl)/robots_world/pr2/pr2.urdf.xacro' --inorder KINECT1:=$(arg KINECT1) KINECT2:=$(arg KINECT2)" />
  </group>

    <!--  MOVE GROUP -->
  <!-- The semantic description that corresponds to the URDF -->
  <param name="robot_description_semantic" textfile="$(find pr2_moveit_config)/config/pr2.srdf" />

  <!-- Load to the parameter server yaml files -->
  <group ns="robot_description_planning">
    <rosparam command="load" file="$(find pr2_moveit_config)/config/joint_limits.yaml"/>
  </group>

  <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
  <group ns="robot_description_kinematics">
    <rosparam command="load" file="$(find pr2_moveit_config)/config/kinematics.yaml"/>
  </group>

  <node name="move_group" launch-prefix="" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="false"/>
    <param name="max_safe_path_cost" value="1"/>
    <param name="jiggle_fraction" value="0.05" />

    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
                                      move_group/MoveGroupExecuteService
                                      move_group/MoveGroupKinematicsService
                                      move_group/MoveGroupMoveAction
                                      move_group/MoveGroupPickPlaceAction
                                      move_group/MoveGroupPlanService
                                      move_group/MoveGroupQueryPlannersService
                                      move_group/MoveGroupStateValidationService
                                      move_group/MoveGroupGetPlanningSceneService
                                      move_group/ApplyPlanningSceneService
                                      move_group/ClearOctomapService
                                      " />

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="true" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="false" />
    <param name="planning_scene_monitor/publish_state_updates" value="false" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="false" />
  </node>

</launch>
