# generated from rosidl_generator_py/resource/_idl.py.em
# with input from opendr_ros2_messages:srv/Mesh.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_Mesh_Request(type):
    """Metaclass of message 'Mesh_Request'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('opendr_ros2_messages')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'opendr_ros2_messages.srv.Mesh_Request')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__srv__mesh__request
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__srv__mesh__request
            cls._CONVERT_TO_PY = module.convert_to_py_msg__srv__mesh__request
            cls._TYPE_SUPPORT = module.type_support_msg__srv__mesh__request
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__srv__mesh__request

            from sensor_msgs.msg import Image
            if Image.__class__._TYPE_SUPPORT is None:
                Image.__class__.__import_type_support__()

            from std_msgs.msg import Bool
            if Bool.__class__._TYPE_SUPPORT is None:
                Bool.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class Mesh_Request(metaclass=Metaclass_Mesh_Request):
    """Message class 'Mesh_Request'."""

    __slots__ = [
        '_rgb_img',
        '_msk_img',
        '_extract_pose',
    ]

    _fields_and_field_types = {
        'rgb_img': 'sensor_msgs/Image',
        'msk_img': 'sensor_msgs/Image',
        'extract_pose': 'std_msgs/Bool',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.NamespacedType(['sensor_msgs', 'msg'], 'Image'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['sensor_msgs', 'msg'], 'Image'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Bool'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        from sensor_msgs.msg import Image
        self.rgb_img = kwargs.get('rgb_img', Image())
        from sensor_msgs.msg import Image
        self.msk_img = kwargs.get('msk_img', Image())
        from std_msgs.msg import Bool
        self.extract_pose = kwargs.get('extract_pose', Bool())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.rgb_img != other.rgb_img:
            return False
        if self.msk_img != other.msk_img:
            return False
        if self.extract_pose != other.extract_pose:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def rgb_img(self):
        """Message field 'rgb_img'."""
        return self._rgb_img

    @rgb_img.setter
    def rgb_img(self, value):
        if __debug__:
            from sensor_msgs.msg import Image
            assert \
                isinstance(value, Image), \
                "The 'rgb_img' field must be a sub message of type 'Image'"
        self._rgb_img = value

    @property
    def msk_img(self):
        """Message field 'msk_img'."""
        return self._msk_img

    @msk_img.setter
    def msk_img(self, value):
        if __debug__:
            from sensor_msgs.msg import Image
            assert \
                isinstance(value, Image), \
                "The 'msk_img' field must be a sub message of type 'Image'"
        self._msk_img = value

    @property
    def extract_pose(self):
        """Message field 'extract_pose'."""
        return self._extract_pose

    @extract_pose.setter
    def extract_pose(self, value):
        if __debug__:
            from std_msgs.msg import Bool
            assert \
                isinstance(value, Bool), \
                "The 'extract_pose' field must be a sub message of type 'Bool'"
        self._extract_pose = value


# Import statements for member types

# already imported above
# import rosidl_parser.definition


class Metaclass_Mesh_Response(type):
    """Metaclass of message 'Mesh_Response'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('opendr_ros2_messages')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'opendr_ros2_messages.srv.Mesh_Response')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__srv__mesh__response
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__srv__mesh__response
            cls._CONVERT_TO_PY = module.convert_to_py_msg__srv__mesh__response
            cls._TYPE_SUPPORT = module.type_support_msg__srv__mesh__response
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__srv__mesh__response

            from shape_msgs.msg import Mesh
            if Mesh.__class__._TYPE_SUPPORT is None:
                Mesh.__class__.__import_type_support__()

            from std_msgs.msg import ColorRGBA
            if ColorRGBA.__class__._TYPE_SUPPORT is None:
                ColorRGBA.__class__.__import_type_support__()

            from vision_msgs.msg import Detection3DArray
            if Detection3DArray.__class__._TYPE_SUPPORT is None:
                Detection3DArray.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class Mesh_Response(metaclass=Metaclass_Mesh_Response):
    """Message class 'Mesh_Response'."""

    __slots__ = [
        '_mesh',
        '_vertex_colors',
        '_pose',
    ]

    _fields_and_field_types = {
        'mesh': 'shape_msgs/Mesh',
        'vertex_colors': 'sequence<std_msgs/ColorRGBA>',
        'pose': 'vision_msgs/Detection3DArray',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.NamespacedType(['shape_msgs', 'msg'], 'Mesh'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'ColorRGBA')),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['vision_msgs', 'msg'], 'Detection3DArray'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        from shape_msgs.msg import Mesh
        self.mesh = kwargs.get('mesh', Mesh())
        self.vertex_colors = kwargs.get('vertex_colors', [])
        from vision_msgs.msg import Detection3DArray
        self.pose = kwargs.get('pose', Detection3DArray())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.mesh != other.mesh:
            return False
        if self.vertex_colors != other.vertex_colors:
            return False
        if self.pose != other.pose:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def mesh(self):
        """Message field 'mesh'."""
        return self._mesh

    @mesh.setter
    def mesh(self, value):
        if __debug__:
            from shape_msgs.msg import Mesh
            assert \
                isinstance(value, Mesh), \
                "The 'mesh' field must be a sub message of type 'Mesh'"
        self._mesh = value

    @property
    def vertex_colors(self):
        """Message field 'vertex_colors'."""
        return self._vertex_colors

    @vertex_colors.setter
    def vertex_colors(self, value):
        if __debug__:
            from std_msgs.msg import ColorRGBA
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, ColorRGBA) for v in value) and
                 True), \
                "The 'vertex_colors' field must be a set or sequence and each value of type 'ColorRGBA'"
        self._vertex_colors = value

    @property
    def pose(self):
        """Message field 'pose'."""
        return self._pose

    @pose.setter
    def pose(self, value):
        if __debug__:
            from vision_msgs.msg import Detection3DArray
            assert \
                isinstance(value, Detection3DArray), \
                "The 'pose' field must be a sub message of type 'Detection3DArray'"
        self._pose = value


class Metaclass_Mesh(type):
    """Metaclass of service 'Mesh'."""

    _TYPE_SUPPORT = None

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('opendr_ros2_messages')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'opendr_ros2_messages.srv.Mesh')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._TYPE_SUPPORT = module.type_support_srv__srv__mesh

            from opendr_ros2_messages.srv import _mesh
            if _mesh.Metaclass_Mesh_Request._TYPE_SUPPORT is None:
                _mesh.Metaclass_Mesh_Request.__import_type_support__()
            if _mesh.Metaclass_Mesh_Response._TYPE_SUPPORT is None:
                _mesh.Metaclass_Mesh_Response.__import_type_support__()


class Mesh(metaclass=Metaclass_Mesh):
    from opendr_ros2_messages.srv._mesh import Mesh_Request as Request
    from opendr_ros2_messages.srv._mesh import Mesh_Response as Response

    def __init__(self):
        raise NotImplementedError('Service classes can not be instantiated')
