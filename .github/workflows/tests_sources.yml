name: Test Sources

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]

defaults:
  run:
    shell: bash

jobs:
  cleanup-runs:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test sources') || contains(github.event.pull_request.labels.*.name, 'test tools') || contains(github.event.pull_request.labels.*.name, 'test dependencies')}}
    runs-on: ubuntu-latest
    steps:
    - uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  test-sources:
    needs: cleanup-runs
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test sources') }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15]
        include:
          - os: ubuntu-18.04
            DEPENDENCIES_INSTALLATION: "sudo apt -y install clang-format-10 cppcheck"
          - os: ubuntu-20.04
            DEPENDENCIES_INSTALLATION: "sudo apt -y install clang-format-10 cppcheck"
          - os: macos-10.15
            DEPENDENCIES_INSTALLATION: "brew install clang-format cppcheck"
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      if: matrix.os == 'ubuntu-20.04' || github.event.pull_request.draft == false
      with:
         submodules: true
    - name: Set up Python 3.8
      if: matrix.os == 'ubuntu-20.04' || github.event.pull_request.draft == false
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Test Sources
      if: matrix.os == 'ubuntu-20.04' || github.event.pull_request.draft == false
      run: |
        ${{ matrix.DEPENDENCIES_INSTALLATION }}
        export OPENDR_HOME=$PWD
        export OPENDR_DEVICE=cpu
        pip install -r tests/requirements.txt
        python -m unittest discover -s tests
  test-dependencies:
    needs: cleanup-runs
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test dependencies') }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        include:
          - os: ubuntu-20.04
            DEPENDENCIES_INSTALLATION: "sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' \
            && curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -"
            ROS_DISTRO: "noetic"
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Test Dependencies
      if: ${{ contains(github.event.pull_request.labels.*.name, 'test dependencies') }}
      run: |
        ${{ matrix.DEPENDENCIES_INSTALLATION }}
        export OPENDR_HOME=$PWD
        export OPENDR_DEVICE=cpu
        export PYTHONPATH=$OPENDR_HOME/src:$PYTHONPATH
        export DISABLE_BCOLZ_AVX2=true
        export ROS_DISTRO=${{ matrix.ROS_DISTRO }}
        make install_compilation_dependencies
        make install_runtime_dependencies
        pip install -r tests/sources/requirements.txt
        python -m unittest discover -s tests/sources/tools/engine
        python -m unittest discover -s tests/sources/tools/utils
  test-perception:
    needs: test-dependencies
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test perception') }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        package:
          - perception/activity_recognition
          - perception/compressive_learning
          - perception/face_recognition
          - perception/heart_anomaly_detection
          - perception/multimodal_human_centric
          - perception/object_tracking_2d
          - perception/object_detection_3d
          - perception/pose_estimation
          - perception/speech_recognition
          - perception/skeleton_based_action_recognition
          - perception/semantic_segmentation
          - perception/object_detection_2d
          - perception/facial_expression_recognition/landmark_based_facial_expression_recognition
          # - perception/object_tracking_3d
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Test Perception Tools
      if: ${{ contains(github.event.pull_request.labels.*.name, 'test perception') }}
      run:
        python -m unittest discover -s tests/sources/tools/${{ matrix.package }}
  test-control:
    needs: test-dependencies
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test control') }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        package:
          - control/mobile_manipulation
    runs-on: ${{ matrix.os }}
    steps:
    - name: Test Control Tools
      if: ${{ contains(github.event.pull_request.labels.*.name, 'test control') }}
      run:
        source tests/sources/tools/control/mobile_manipulation/run_ros.sh
        python -m unittest discover -s tests/sources/tools/${{ matrix.package }}
  test-simulation:
    needs: test-dependencies
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test simulation') }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        package:
        - simulation/human_model_generation
    runs-on: ${{ matrix.os }}
    steps:
    - name: Test Simulation Tools
      if: ${{ contains(github.event.pull_request.labels.*.name, 'test simulation') }}
      run:
        python -m unittest discover -s tests/sources/tools/${{ matrix.package }}
